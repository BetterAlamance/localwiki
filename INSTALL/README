Here's how to get this code running on Ubuntu Server Edition 10.04 LTS.  For
more general install instructions see the NOTE at the bottom of this document.

1.  Prerequisites: libxslt, python-dev, solr + jetty, image decoders,
python-setuptools, virtualenv, gdal, postgresql, postgis, mercurial:

    $ sudo apt-get install libxslt-dev python-dev python-setuptools solr-jetty
    $ sudo apt-get install libjpeg62-dev zlib1g-dev gdal-bin proj
    $ sudo apt-get install postgresql-8.4-postgis python-psycopg2
    $ sudo easy_install virtualenv


2.  Set up virtualenv. For more info, see http://pypi.python.org/pypi/virtualenv

Create an empty environment.  Replace ENV with whatever folder name you want.
    $ virtualenv ENV
    
Activate the new environment.
    $ source ENV/bin/activate
    
    (ENV)[...]$  	<-- This prompt means you've activated the ENV environment.
                        Run all of the following commands in this environment.
    

3.  Install required python packages using requirements.txt, included in this
distribution.  pip makes this super easy:
	(ENV)$ pip install -r INSTALL/requirements.txt


4.  Create the database.  Here's how we do it:

    (ENV)$ sudo -u postgres bash INSTALL/create_template_postgis-debian.sh
    (ENV)$ sudo su - postgres  # Become postgres user, then:

    $ createuser sapling -P  # Remember the password you enter here!
    $ createdb -E UTF8 -T template_postgis -O sapling sapling
    # Switch back to your normal system user now.

    You may want to customize the user & privilege granting based on your
    local setup, of course.


5.  Allow the search, diff services to start & back up existing config:

    (ENV)$ sudo sed -i 's/NO_START=1/NO_START=0/g' /etc/default/jetty
    (ENV)$ sudo cp /etc/solr/conf/schema.xml /etc/solr/conf/schema.xml.orig
    (ENV)$ sudo cp INSTALL/solr_schema.xml /etc/solr/conf/schema.xml
    (ENV)$ sudo cp INSTALL/daisydiff.war /var/lib/jetty/webapps
    (ENV)$ sudo service jetty restart


6.  Copy sapling/localsettings_template.py to sapling/localsettings.py and edit
it, adding your database password and other nice things:
	(ENV)$ cp sapling/localsettings_template.py sapling/localsettings.py

Initialize the project environment:

    (ENV)$ python sapling/manage.py syncdb
    (ENV)$ python sapling/manage.py collectstatic
    (ENV)$ python sapling/manage.py rebuild_index

You are now done configuring and installing things! You can start the built-in
Django development server:
    
    (ENV)$ python sapling/manage.py runserver

Hooray!

Note: For security/efficiency, the built-in server listens on 127.0.0.1 only.
      For real deployments you'll want to use an actual webserver.  The code 
      isn't production ready yet, so don't do that.

-------------------------------------------------------------------------------
NOTE: This setup assumes we're using PostgreSQL and its geographic companion,
PostGIS.  You should in theory be able to use any supported Django database.
If you'd like to do something more specialized, please see the general Django
install instructions here:

http://docs.djangoproject.com/en/dev/topics/install/

and the GeoDjango install instructions here:

http://docs.djangoproject.com/en/dev/ref/contrib/gis/install/
-------------------------------------------------------------------------------
