NOTE: This setup assumes we're using PostgreSQL and it's geographic companion,
PostGIS.  You should in theory be able to use any supported Django database.
If you'd like to do something more specialized, please see the general Django
install instructions here:

http://docs.djangoproject.com/en/dev/topics/install/

and the GeoDjango install instructions here:

http://docs.djangoproject.com/en/dev/ref/contrib/gis/install/
-------------------------------------------------------------------------------

Here's how to get this code running on Ubuntu Server Edition 10.04 LTS

1.  Prerequisites: gcc, libxml2, libxslt, python-dev(the last 4 are
needed by lxml), java(needed for daisydiff and search), solr, image decoders,
python-setuptools, virtualenv, gdal, postgresql, postgis, mercurial:

    $ sudo apt-get install gcc libxslt-dev python-dev
    $ sudo apt-get install openjdk-6-jdk solr-jetty
    $ sudo aptitude install libjpeg62 libjpeg62-dev zlib1g-dev
    $ sudo apt-get install python-setuptools
    $ sudo apt-get install gdal-bin proj
    $ sudo apt-get install postgresql-8.4-postgis postgresql-client
    $ sudo apt-get install python-psycopg2
    $ sudo apt-get install mercurial
    $ sudo easy_install virtualenv


2.  Set up virtualenv. For more info, see http://pypi.python.org/pypi/virtualenv

Create an empty environment.  Replace ENV with whatever folder name you want.
    $ virtualenv ENV
    
Activate the new environment.
    $ source ENV/bin/activate
    
    (ENV)[...]$  	<-- This prompt means you've activated the ENV environment.
                        Run all of the following commands in this environment.
    

3.  Install pip, if it's not already there.  Recent versions of virtualenv
come with pip installed.  For more info, see http://pypi.python.org/pypi/pip

Check if pip is installed.
	(ENV)$ pip --version

If you get "pip: command not found", install it.
	(ENV)$ easy_install pip
	
	
4.  Install required python packages using requirements.txt, included in this
distribution.  pip makes this super easy.
	(ENV)$ pip install -r INSTALL/requirements.txt


5.  Create the database.  Here's how we do it:

    (ENV)$ sudo -u postgres bash INSTALL/create_template_postgis-debian.sh
    (ENV)$ sudo su - postgres  # Become postgres user, then:

    $ createuser sapling -P  # Remember the password you enter here!
    $ createdb -E UTF8 -T template_postgis -O sapling sapling
    # Switch back to your normal system user now.

    You may want to customize the user & privilege granting based on your
    local setup, of course.


6.  Allow the search service to start and back up existing config:

    (ENV)$ sudo sed -i 's/NO_START=1/NO_START=0/g' /etc/default/jetty
    (ENV)$ sudo cp /etc/solr/conf/schema.xml /etc/solr/conf/schema.xml.orig
    (ENV)$ sudo cp INSTALL/solr_schema.xml /etc/solr/conf/schema.xml
    
    Then start the search service:

    (ENV)$ sudo service jetty start


7.  Copy sapling/localsettings_template.py to sapling/localsettings.py and edit
to your liking.
	(ENV)$ cp sapling/localsettings_template.py sapling/localsettings.py


You are now done installing things and you can start the built-in Django
development server, after running syncdb and collectstatic.
	(ENV)$ python sapling/manage.py syncdb
	(ENV)$ python sapling/manage.py collectstatic
	(ENV)$ python sapling/manage.py rebuild_index
	(ENV)$ python sapling/manage.py runserver

Note: by default, the development server listens on 127.0.0.1 only.  To access
the development server from another machine (a potential security hazard), run:
	(ENV)$ python sapling/manage.py runserver 0.0.0.0:8000
	
To enable pretty diffing and merging, start the html diff server in a new
terminal:
	$ cd sapling/versionutils/diff/daisydiff/
	$ java -jar daisydiff.jar --server --port=8081
	
Hooray!
